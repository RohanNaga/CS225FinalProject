##Leading Question: 
We hope to learn more about the connectivity of air travel, specifically the most optimal way to go from one location/airport to another, with landmarks. Using the OpenFlights dataset, we will analyze and create conclusions based on the shortest route with landmarks between two locations. The question we are solving is: What is the most optimal way to fly from one location to another whilst also visiting other desired landmarks? We define “landmarks” as other locations/airports that one wants to visit, separate from the initial and ending locations.  For example, if I’m flying from Chicago (ORD) to New York City (JFK), but I also want to see Miami (MIA) and Louisville (SDF), the algorithm will find the shortest path from one location to the other, while visiting the other desired cities along the way. 


##Dataset Acquisition:
For our dataset we will be using the OpenFlights dataset found at https://openflights.org/data.htm. We will be parsing the input data by converting the dataset into a graph of airport nodes and edges representing the flight paths. Missing entries or invalid inputs will be considered unusable and will be ignored for the purpose of the project.


##Data Format:
The format of the data within the OpenFlights dataset contains 67663 flight paths from 3321 airports with 548 airlines alongside airport name and ID, as well as city, country, longitude and latitude. We will be using all of the data instead of a subset. The format of this dataset is also in a .dat file which we will then convert to use.


##Data Correction:
We will use a graph to model this dataset. A node will represent an airport and an edge from that node to another node will show a flight between these two airports. We will then use a Depth First Search (DFS) to parse this graph by visiting each node and creating an adjacency matrix, which will highlight the flights from one airport to another. To check that the data is error-free, we will make sure that the graph results in one connected component, which will indicate that all airports are somehow connected to each other. We will implement this using a DFS and creating a vector of all of the nodes that it visits. This vector will have all of the nodes with no repeats assuming that it is one connected component. We will make sure that we have all of the airports by checking it with the airport.dat file that has all of the airport information.

##Data Storage: 
We will be using a graph to represent the dataset with each airport as a node and an edge from that node to another node showing/representing a flight between two airports. We will then perform a Depth First Search (DFS) to visit each node and create an adjacency matrix, which will highlight the flights from one airport to another. Additionally, we will also use Djikstra’s algorithm to find the shortest path and the number of flights from one airport to another, and use the Landmark Algorithm to take into consideration the other desired locations as landmarks that the input might want to visit from the initial airport to the end airport. The output will be a vector that contains the airport IDs from the shortest paths with the additional landmarks along the way. The runtime of this storage will be the run time of the DFS algorithm, which is O(m + n), where m is the number of edges and n is the number of vertices. 

##Graph Algorithms: 
We will use a graph, where each node represents an airport, and an edge represents a flight between the two airports. We will then traverse the graph using a DFS traversal to visit each node. We will use Djikstra’s algorithm to find the smallest number of flights between one airport and another (shortest path between two airports). This will be used if there are no landmark airports that are specified to visit between the origin and destination airports. This is because Djikstra’s algorithm could give a direct flight between two airports if it is available. Additionally, we will also implement the Landmark Algorithm that will adjust the flight path for any possible airports that the input might want to visit on the flight from the start airport to the end airport. This will be used to derive the shortest path between the two airports while requiring that certain airports are passed through, if needed. In a case where there are airports that must be visited in between the origin and destination, the Landmark Algorithm will be useful because it will give the shortest path between two airports while including the landmarks. We will use an adjacency matrix to represent flights from one airport to another. The output of our project will be a vector that contains the airport IDs of the shortest path from Airport A to B while including landmarks along the way. 

The first input in the algorithm is the node from the graph we are using to store the list of information for the airports in the dataset. The second input is the range set of the airports that we want in the adjacency matrix. Next, we will find the eigenvalues of the adjacency matrix and store it in a vector, which will be our algorithm’s output. 

The total runtime of the algorithm will be O(m + n log n), which is the runtime of Djikstra’s algorithm where m denotes the number of edges and n is the number of vertices.

##Timeline: 
November 24th: Finish DFS Algorithm
December 1st: Finish Dijkstra's Algorithm
December 6th: Finish Landmark Algorithm
December 10th : Finish final presentation and report
